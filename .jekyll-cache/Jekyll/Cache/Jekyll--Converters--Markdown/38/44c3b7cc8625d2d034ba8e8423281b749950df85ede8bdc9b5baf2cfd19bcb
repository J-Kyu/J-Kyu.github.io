I"ÿE<h1 id="leetcode-week-3">LeetCode: Week 3</h1>

<blockquote>
  <p>:star: : Hard Coding</p>

  <p>:star::star: : Basic Question</p>

  <p>:star::star::star: : Twisted but worthy</p>

  <p>:star::star::star::star:: Discerning</p>
</blockquote>

<h2 id="45jump-game-ii-starstar"><a href="https://leetcode.com/problems/jump-game-ii/">45.Jump Game II</a> :star::star:</h2>

<h3 id="dp">DP</h3>

<p>Time Complexity: \(O(N^2)\)</p>

<p>Space Complexity: \(O(N)\)</p>

<p><strong>Key-Point</strong>: We save index of reachable and longest value of <code class="language-html highlighter-rouge">nums</code> at <code class="language-html highlighter-rouge">dp</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">jump</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
        <span class="s">"""
        :type nums: List[int]
        :rtype: int
        """</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
            
            <span class="n">mxIndex</span> <span class="o">=</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
                <span class="n">distance</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span><span class="n">j</span>
                <span class="k">if</span> <span class="n">distance</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="ow">and</span> <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">dp</span><span class="p">[</span><span class="n">mxIndex</span><span class="p">]:</span>
                    <span class="n">mxIndex</span> <span class="o">=</span> <span class="n">j</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">mxIndex</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
            
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="greedy-starstarstar-retry">Greedy :star::star::star: (Retry)</h3>

<p>Time Complexity: \(O(N)\)</p>

<p>Space Complexity: \(O(1)\)</p>

<p><strong>Key-Point</strong>: As we go through <code class="language-html highlighter-rouge">nums</code>, we aim at the possible longest index as target. Once we reach the target index we increment one.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">jump</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
        <span class="s">"""
        :type nums: List[int]
        :rtype: int
        """</span>
        <span class="c1"># greedy
</span>        
        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        
        <span class="n">jumpCount</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">targetJumpIndex</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">longestDistance</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">longestDistance</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">longestDistance</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            
            <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="n">targetJumpIndex</span><span class="p">:</span>
                <span class="n">jumpCount</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">targetJumpIndex</span> <span class="o">=</span> <span class="n">longestDistance</span>
        <span class="k">return</span> <span class="n">jumpCount</span>
</code></pre></div></div>

<h2 id="55-jump-game"><a href="https://leetcode.com/problems/jump-game/">55. Jump Game</a></h2>

<h3 id="greedy-star">Greedy :star:</h3>

<p>Time Complexity: \(O(N)\)</p>

<p>Space Complexity: \(O(1)\)</p>

<p><strong>Key-Point</strong>: Check the  farthest Index and update when you reach the farthest Index</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">canJump</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
        <span class="s">"""
        :type nums: List[int]
        :rtype: bool
        """</span>  
        <span class="c1"># Greedy 
</span>        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="n">mostFar</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">aimIndex</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="n">mostFar</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">mostFar</span><span class="p">,</span><span class="n">i</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> 
                
            <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="n">aimIndex</span><span class="p">:</span>
                    <span class="n">aimIndex</span> <span class="o">=</span> <span class="n">mostFar</span>
        <span class="k">if</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="o">&gt;</span> <span class="n">aimIndex</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
</code></pre></div></div>

<h2 id="56-merge-intervals"><a href="https://leetcode.com/problems/merge-intervals/">56. Merge Intervals</a></h2>

<h3 id="sort-star">Sort :star:</h3>

<p>Time Complexity: \(O(N)\)</p>

<p>Space Complexity: \(O(N)\)</p>

<p><strong>Key-Point</strong>: Compare current interval with last value from out list.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">merge</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">intervals</span><span class="p">):</span>
        <span class="n">out</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">intervals</span><span class="p">.</span><span class="n">sort</span><span class="p">()</span> 
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">intervals</span><span class="p">:</span>
            <span class="c1">#change...either merge or extend
</span>            <span class="k">if</span> <span class="n">out</span> <span class="ow">and</span> <span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">out</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]:</span>
                <span class="n">out</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">out</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
            <span class="c1">#append
</span>            <span class="k">else</span><span class="p">:</span>
                <span class="n">out</span> <span class="o">+=</span> <span class="n">i</span><span class="p">,</span>
        <span class="k">return</span> <span class="n">out</span>
</code></pre></div></div>

<h2 id="57-insert-interval"><a href="https://leetcode.com/problems/insert-interval/">57. Insert Interval</a></h2>

<h3 id="sort-star-1">Sort :star:</h3>

<p>Same as <code class="language-html highlighter-rouge">56.Merge Intervals</code></p>

<h3 id="compare-with-new-interval">Compare with New Interval</h3>

<p>Time Complexity: \(O(N)\)</p>

<p>Space Complexity: \(O(N)\)</p>

<p><strong>Key-Point</strong>: Verify cases and use <code class="language-html highlighter-rouge">min</code> and <code class="language-html highlighter-rouge">max</code> method to cover range.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">intervals</span><span class="p">,</span> <span class="n">newInterval</span><span class="p">):</span>
        <span class="s">"""
        :type intervals: List[List[int]]
        :type newInterval: List[int]
        :rtype: List[List[int]]
        """</span>
        
        <span class="c1"># compare wtih newinterval and substitute
</span>        
        <span class="n">out</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">interval</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">intervals</span><span class="p">):</span>
                <span class="k">if</span>  <span class="n">interval</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>  <span class="o">&lt;</span> <span class="n">newInterval</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
                    <span class="n">out</span> <span class="o">+=</span> <span class="p">[</span><span class="n">interval</span><span class="p">]</span>
                <span class="k">elif</span> <span class="n">interval</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">newInterval</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
                    <span class="k">return</span> <span class="n">out</span><span class="o">+</span><span class="p">[</span><span class="n">newInterval</span><span class="p">]</span><span class="o">+</span><span class="n">intervals</span><span class="p">[</span><span class="n">i</span><span class="p">:]</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">newInterval</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">interval</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">newInterval</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
                    <span class="n">newInterval</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">interval</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">newInterval</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
                    
        <span class="n">out</span> <span class="o">+=</span> <span class="p">[</span><span class="n">newInterval</span><span class="p">]</span> 
        <span class="k">return</span> <span class="n">out</span>
</code></pre></div></div>

<h2 id="59spiral-matrix-ii"><a href="https://leetcode.com/problems/spiral-matrix-ii/">59.Spiral Matrix II</a></h2>

<h3 id="bitmask">Bitmask</h3>

<p>Time Complexity: \(O(N)\)</p>

<p>Space Complexity: \(O(N)\)</p>

<p><strong>Key-Point</strong>: When <code class="language-html highlighter-rouge">a=0</code> and <code class="language-html highlighter-rouge">b=1</code> , using idea of  <code class="language-html highlighter-rouge">a,b = b, -a</code>  can go 4 direction around.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">generateMatrix</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="s">"""
        :type n: int
        :rtype: List[List[int]]
        """</span>
        <span class="n">A</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">n</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
        
        <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">di</span><span class="p">,</span> <span class="n">dj</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
        
        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">n</span><span class="o">*</span><span class="n">n</span><span class="p">):</span>
            <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">k</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">A</span><span class="p">[(</span><span class="n">i</span><span class="o">+</span><span class="n">di</span><span class="p">)</span><span class="o">%</span><span class="n">n</span><span class="p">][(</span><span class="n">j</span><span class="o">+</span><span class="n">dj</span><span class="p">)</span><span class="o">%</span><span class="n">n</span><span class="p">]:</span><span class="c1"># nxt filled already
</span>                <span class="n">di</span><span class="p">,</span> <span class="n">dj</span> <span class="o">=</span> <span class="n">dj</span><span class="p">,</span> <span class="o">-</span><span class="n">di</span> <span class="c1"># turn right
</span>            <span class="n">i</span> <span class="o">+=</span> <span class="n">di</span>
            <span class="n">j</span> <span class="o">+=</span> <span class="n">dj</span>
        <span class="k">return</span> <span class="n">A</span>
</code></pre></div></div>

:ET