I"ÉC<h1 id="leetcode-week-2">LeetCode: Week 2</h1>

<h2 id="11-container-with-most-water-starstar"><a href="https://leetcode.com/problems/container-with-most-water/">11. Container With Most Water</a> :star::star:</h2>

<h3 id="two-pointer">Two Pointer</h3>

<p>Time Complexity: \(O(N)\)</p>

<p>Space Complexity: \(O(1)\)</p>

<p><strong>Key-Point</strong>: Compare bars until currently higher bar becomes smaller one and the new higher bar is smaller than previous width.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">maxArea</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">height</span><span class="p">):</span>
        <span class="s">"""
        :type height: List[int]
        :rtype: int
        """</span>
        <span class="c1"># sliding window
</span>        
        <span class="n">startIndex</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">endIndex</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">height</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
        
        <span class="n">curSpace</span>  <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">startIndex</span>  <span class="o">&lt;</span> <span class="n">endIndex</span><span class="p">:</span>
               
            <span class="n">w</span> <span class="o">=</span> <span class="n">endIndex</span> <span class="o">-</span> <span class="n">startIndex</span>
            <span class="k">if</span> <span class="n">height</span><span class="p">[</span><span class="n">startIndex</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">height</span><span class="p">[</span><span class="n">endIndex</span><span class="p">]:</span>
                <span class="n">h</span> <span class="o">=</span> <span class="n">height</span><span class="p">[</span><span class="n">startIndex</span><span class="p">]</span>
                <span class="n">startIndex</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">h</span> <span class="o">=</span> <span class="n">height</span><span class="p">[</span><span class="n">endIndex</span><span class="p">]</span>
                <span class="n">endIndex</span> <span class="o">-=</span> <span class="mi">1</span>
            
            <span class="k">if</span> <span class="n">curSpace</span> <span class="o">&lt;</span> <span class="n">h</span> <span class="o">*</span> <span class="n">w</span><span class="p">:</span>
                <span class="n">curSpace</span> <span class="o">=</span> <span class="n">h</span> <span class="o">*</span> <span class="n">w</span>
            
        <span class="k">return</span> <span class="n">curSpace</span>
</code></pre></div></div>

<h2 id="12-integer-to-roman-star"><a href="https://leetcode.com/problems/integer-to-roman/solution/">12. Integer to Roman</a> :star:</h2>

<h3 id="use-list">Use List</h3>

<p>Time Complexity: \(O(N)\)</p>

<p>Space Complexity: \(O(1)\)</p>

<p><strong>Key-point:</strong> using list and index.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">intToRoman</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
        <span class="s">"""
        :type num: int
        :rtype: str
        """</span>
        
        <span class="n">symbol</span> <span class="o">=</span> <span class="p">[</span><span class="s">'I'</span><span class="p">,</span><span class="s">'V'</span><span class="p">,</span><span class="s">'X'</span><span class="p">,</span><span class="s">'L'</span><span class="p">,</span><span class="s">'C'</span><span class="p">,</span><span class="s">'D'</span><span class="p">,</span><span class="s">'M'</span><span class="p">,</span><span class="s">''</span><span class="p">,</span><span class="s">''</span><span class="p">]</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="s">""</span>
        <span class="n">numStr</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
        
        
        <span class="k">def</span> <span class="nf">GenerateRomanChar</span><span class="p">(</span><span class="n">loc</span><span class="p">,</span><span class="n">num</span><span class="p">):</span>
            <span class="n">ans</span> <span class="o">=</span> <span class="s">""</span>
            
            
            <span class="n">strt</span> <span class="o">=</span> <span class="n">symbol</span><span class="p">[</span><span class="n">loc</span><span class="o">*</span><span class="mi">2</span><span class="p">]</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="n">symbol</span><span class="p">[</span><span class="n">loc</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">end</span> <span class="o">=</span> <span class="n">symbol</span><span class="p">[</span><span class="n">loc</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span>
            
            <span class="k">if</span> <span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">num</span> <span class="ow">and</span> <span class="n">num</span> <span class="o">&lt;=</span> <span class="mi">3</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
                    <span class="n">ans</span> <span class="o">+=</span> <span class="n">strt</span>
            <span class="k">elif</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="n">strt</span><span class="o">+</span><span class="n">mid</span> 
            <span class="k">elif</span> <span class="mi">5</span> <span class="o">&lt;=</span> <span class="n">num</span> <span class="ow">and</span> <span class="n">num</span> <span class="o">&lt;=</span><span class="mi">8</span><span class="p">:</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="n">mid</span>
                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num</span><span class="o">-</span><span class="mi">5</span><span class="p">):</span>
                    <span class="n">ans</span> <span class="o">+=</span> <span class="n">strt</span>
            <span class="k">elif</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">9</span><span class="p">:</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="n">strt</span><span class="o">+</span><span class="n">end</span>
            
            <span class="k">return</span> <span class="n">ans</span>

        
        <span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">numStr</span><span class="p">)):</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="n">GenerateRomanChar</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">numStr</span><span class="p">)</span><span class="o">-</span><span class="n">index</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nb">int</span><span class="p">(</span><span class="n">numStr</span><span class="p">[</span><span class="n">index</span><span class="p">]))</span>
            <span class="n">index</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h3 id="simple-solution">Simple Solution</h3>

<p>Time Complexity: \(O(1)\)</p>

<p>Space Complexity: \(O(1)\)</p>

<p><strong>Key-point:</strong> Some time, cases are less than what you think</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">intToRoman</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
        <span class="s">"""
        :type num: int
        :rtype: str
        """</span>
        <span class="n">M</span> <span class="o">=</span> <span class="p">[</span><span class="s">""</span><span class="p">,</span> <span class="s">"M"</span><span class="p">,</span><span class="s">"MM"</span><span class="p">,</span><span class="s">"MMM"</span><span class="p">]</span>
        <span class="n">C</span> <span class="o">=</span> <span class="p">[</span><span class="s">""</span><span class="p">,</span> <span class="s">"C"</span><span class="p">,</span> <span class="s">"CC"</span><span class="p">,</span> <span class="s">"CCC"</span><span class="p">,</span> <span class="s">"CD"</span><span class="p">,</span> <span class="s">"D"</span><span class="p">,</span> <span class="s">"DC"</span><span class="p">,</span> <span class="s">"DCC"</span><span class="p">,</span> <span class="s">"DCCC"</span><span class="p">,</span> <span class="s">"CM"</span><span class="p">]</span>
        <span class="n">X</span> <span class="o">=</span> <span class="p">[</span><span class="s">""</span><span class="p">,</span> <span class="s">"X"</span><span class="p">,</span> <span class="s">"XX"</span><span class="p">,</span> <span class="s">"XXX"</span><span class="p">,</span> <span class="s">"XL"</span><span class="p">,</span> <span class="s">"L"</span><span class="p">,</span> <span class="s">"LX"</span><span class="p">,</span> <span class="s">"LXX"</span><span class="p">,</span> <span class="s">"LXXX"</span><span class="p">,</span> <span class="s">"XC"</span><span class="p">]</span>
        <span class="n">I</span> <span class="o">=</span> <span class="p">[</span><span class="s">""</span><span class="p">,</span> <span class="s">"I"</span><span class="p">,</span> <span class="s">"II"</span><span class="p">,</span> <span class="s">"III"</span><span class="p">,</span> <span class="s">"IV"</span><span class="p">,</span> <span class="s">"V"</span><span class="p">,</span> <span class="s">"VI"</span><span class="p">,</span> <span class="s">"VII"</span><span class="p">,</span> <span class="s">"VIII"</span><span class="p">,</span> <span class="s">"IX"</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">M</span><span class="p">[</span><span class="n">num</span><span class="o">/</span><span class="mi">1000</span><span class="p">]</span> <span class="o">+</span> <span class="n">C</span><span class="p">[(</span><span class="n">num</span><span class="o">%</span><span class="mi">1000</span><span class="p">)</span><span class="o">/</span><span class="mi">100</span><span class="p">]</span><span class="o">+</span><span class="n">X</span><span class="p">[((</span><span class="n">num</span><span class="o">%</span><span class="mi">100</span><span class="p">)</span><span class="o">/</span><span class="mi">10</span><span class="p">)]</span><span class="o">+</span><span class="n">I</span><span class="p">[</span><span class="n">num</span><span class="o">%</span><span class="mi">10</span>
</code></pre></div></div>

<h2 id="17-letter-combination-of-a-phone-number-star-star"><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/">17. Letter Combination of a Phone Number</a> :star: :star:</h2>

<h3 id="dfs">DFS</h3>

<p>Time Complexity: \(O(M^N\cdot N)\), where <code class="language-html highlighter-rouge">M</code> is maximum number of letter on single digit, and <code class="language-html highlighter-rouge">N</code> is total length of given digits.</p>

<p>Space Complexity: \(O(N)\), <code class="language-html highlighter-rouge">N</code> is total length of given digits.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">letterCombinations</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">digits</span><span class="p">):</span>
        <span class="s">"""
        :type digits: str
        :rtype: List[str]
        """</span>
        <span class="n">dial</span> <span class="o">=</span><span class="p">{</span><span class="mi">2</span><span class="p">:[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">,</span><span class="s">'c'</span><span class="p">],</span><span class="mi">3</span><span class="p">:[</span><span class="s">'d'</span><span class="p">,</span><span class="s">'e'</span><span class="p">,</span><span class="s">'f'</span><span class="p">],</span><span class="mi">4</span><span class="p">:{</span><span class="s">'g'</span><span class="p">,</span><span class="s">'h'</span><span class="p">,</span><span class="s">'i'</span><span class="p">},</span><span class="mi">5</span><span class="p">:{</span><span class="s">'j'</span><span class="p">,</span><span class="s">'k'</span><span class="p">,</span><span class="s">'l'</span><span class="p">},</span><span class="mi">6</span><span class="p">:{</span><span class="s">'m'</span><span class="p">,</span><span class="s">'n'</span><span class="p">,</span><span class="s">'o'</span><span class="p">},</span><span class="mi">7</span><span class="p">:{</span><span class="s">'p'</span><span class="p">,</span><span class="s">'q'</span><span class="p">,</span><span class="s">'r'</span><span class="p">,</span><span class="s">'s'</span><span class="p">},</span><span class="mi">8</span><span class="p">:{</span><span class="s">'t'</span><span class="p">,</span><span class="s">'u'</span><span class="p">,</span><span class="s">'v'</span><span class="p">},</span><span class="mi">9</span><span class="p">:{</span><span class="s">'w'</span><span class="p">,</span><span class="s">'x'</span><span class="p">,</span><span class="s">'y'</span><span class="p">,</span><span class="s">'z'</span><span class="p">}}</span>
        
        <span class="n">ans</span>  <span class="o">=</span> <span class="p">[]</span>
        
        <span class="c1"># dfs
</span>        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">curIndex</span><span class="p">,</span><span class="n">tmp</span><span class="p">):</span>
            
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">digits</span><span class="p">):</span>
                <span class="n">ans</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
                <span class="k">return</span>
            
            
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">dial</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">digits</span><span class="p">[</span><span class="n">curIndex</span><span class="p">])]:</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">curIndex</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">tmp</span><span class="o">+</span><span class="n">i</span><span class="p">)</span>
            
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">digits</span><span class="p">)</span>  <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
        <span class="n">dfs</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="s">""</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

:ET