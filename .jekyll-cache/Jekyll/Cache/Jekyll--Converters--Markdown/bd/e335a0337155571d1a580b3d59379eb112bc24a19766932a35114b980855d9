I"©]<h1 id="leetcode-week-5">LeetCode: Week 5</h1>

<h2 id="91-decode-ways-starstar"><a href="https://leetcode.com/problems/decode-ways/">91. Decode Ways</a> :star::star:</h2>

<p>###</p>

<p>Time Complexity: \(O()\)</p>

<p>Space Complexity: \(O()\)</p>

<p><strong>Key-Point</strong>: When single digit is valid, we add from <code class="language-html highlighter-rouge">dp[i-1]</code>. When double digit is valide we add <code class="language-html highlighter-rouge">dp[i-1]</code> with <code class="language-html highlighter-rouge">dp[i-2]</code>.
Single Digit dp[i] += dp[i-1]
Double Digit dp[i] += dp[i-2]   (dp[i] = dp[i-1] + dp[i-2])
To be more specific, when given number is ‚Äú216‚Äù, the <code class="language-html highlighter-rouge">dp</code> will be formed as following.</p>

<p>Index] 0 | 1 | 2 | 3 |
        ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 
value]    | 2 | 1 | 6 |
        ==================
dp]     1 | 1 | 2 | 3 |</p>

<p><code class="language-html highlighter-rouge">dp[2]</code> is equal to 2 because both value <code class="language-html highlighter-rouge">2</code> and <code class="language-html highlighter-rouge">23</code> is valid. 
<code class="language-html highlighter-rouge">dp[3]'' is equal to 3 because</code>16<code class="language-html highlighter-rouge">and</code>6<code class="language-html highlighter-rouge">is valid. Also previous value</code>2<code class="language-html highlighter-rouge">and</code>23<code class="language-html highlighter-rouge">is valid. Thus adding</code>dp[i-1]<code class="language-html highlighter-rouge">and</code>dp[i-2]<code class="language-html highlighter-rouge">is valid way to decode</code>216``.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">numDecodings</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
        <span class="s">"""
        :type s: str
        :rtype: int
        """</span>
        
        <span class="c1">#dp: accumulate valid one (2 cases)
</span>        <span class="c1">#s =    | 1 | 1 | 0 | 1
</span>        <span class="c1">#    --------------------
</span>        <span class="c1">#dp   1 | 1 | 2 | 1 | 1
</span>        
        
        
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
        
        <span class="k">if</span> <span class="ow">not</span> <span class="n">s</span> <span class="ow">or</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">"0"</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span>
            
        <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            
            <span class="c1"># single digit  1~9
</span>            <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="s">"0"</span><span class="p">:</span>
                <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                
            <span class="c1"># double digit    09~27  (value between 01~09 is already been considered from above condition ) 
</span>            <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">:</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="s">"27"</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">:</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="s">"09"</span><span class="p">:</span>
                <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
                
                
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)]</span>
</code></pre></div></div>

<h2 id="92-reverse-linked-list-ii-starstarstar"><a href="https://leetcode.com/problems/reverse-linked-list-ii/">92. Reverse Linked List II</a> :star::star::star:</h2>

<h3 id="iterative-link-reversal">Iterative Link Reversal.</h3>

<p>Time Complexity: \(O(N)\)</p>

<p>Space Complexity: \(O(1)\)</p>

<p><strong>Key-point:</strong></p>
<ol>
  <li>Connect seconde node from left node with left node.</li>
  <li>Insert next node of leftNode on the next of base Node(preNode).</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1"># Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
</span><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">reverseBetween</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">):</span>
        <span class="s">"""
        :type head: ListNode
        :type left: int
        :type right: int
        :rtype: ListNode
        """</span>
        
        <span class="n">newHead</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">head</span><span class="p">)</span>
        <span class="n">curNode</span> <span class="o">=</span> <span class="n">newHead</span>
        <span class="n">preNode</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">leftNode</span> <span class="o">=</span> <span class="bp">None</span>
        

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">left</span><span class="p">):</span>
                <span class="n">preNode</span> <span class="o">=</span> <span class="n">curNode</span>
                <span class="n">leftNode</span> <span class="o">=</span> <span class="n">curNode</span><span class="p">.</span><span class="nb">next</span>
                <span class="n">curNode</span> <span class="o">=</span> <span class="n">curNode</span><span class="p">.</span><span class="nb">next</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">right</span><span class="o">-</span><span class="n">left</span><span class="p">)</span> <span class="p">:</span>
                <span class="c1">#connecting second node form left node with left node
</span>                <span class="n">temp</span> <span class="o">=</span> <span class="n">leftNode</span><span class="p">.</span><span class="nb">next</span>
                <span class="n">leftNode</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">temp</span><span class="p">.</span><span class="nb">next</span>
                
                <span class="c1"># insert next node of left node on previous node
</span>                <span class="n">temp</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">preNode</span><span class="p">.</span><span class="nb">next</span>
                <span class="n">preNode</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">temp</span>
                          
        <span class="k">return</span> <span class="n">newHead</span><span class="p">.</span><span class="nb">next</span>
</code></pre></div></div>

<h2 id="93-restore-ip-addresses-starstar"><a href="https://leetcode.com/problems/restore-ip-addresses/">93. Restore IP Addresses</a> :star::star:</h2>

<h3 id="backtracking">Backtracking</h3>

<p>Time Complexity: \(O(N)\)</p>

<p>Space Complexity: \(O(1)\)</p>

<p><strong>Key-point:</strong> Count index for reaching 4 chunk of ip</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">restoreIpAddresses</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
        <span class="s">"""
        :type s: str
        :rtype: List[str]
        """</span>
        
        <span class="n">out</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>        
        <span class="k">def</span> <span class="nf">Backtracking</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">ip</span><span class="p">,</span><span class="n">out</span><span class="p">,</span><span class="n">index</span><span class="p">):</span>
            
            
            <span class="k">if</span> <span class="n">index</span> <span class="o">&gt;</span> <span class="mi">4</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&gt;</span> <span class="p">(</span><span class="mi">4</span><span class="o">-</span><span class="n">index</span><span class="p">)</span><span class="o">*</span><span class="mi">3</span><span class="p">:</span>
                <span class="k">return</span>
                
            <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="mi">4</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">out</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">ip</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
                <span class="k">return</span>
            
            
            
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
                
                <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">'0'</span><span class="p">):</span>
                    <span class="k">return</span>
                

                <span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="p">[:</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="mi">255</span><span class="p">:</span>
                    <span class="n">Backtracking</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:],</span><span class="n">ip</span><span class="o">+</span><span class="s">'.'</span><span class="o">+</span><span class="n">s</span><span class="p">[:</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="n">out</span><span class="p">,</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
                    
        <span class="n">Backtracking</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">""</span><span class="p">,</span><span class="n">out</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">list</span><span class="p">(</span><span class="n">out</span>
</code></pre></div></div>

<h2 id="94-binary-tree-inorder-traversal-starstar"><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/">94. Binary Tree Inorder Traversal</a> :star::star:</h2>

<h3 id="recusrive">Recusrive</h3>

<p>Time Complexity: \(O(N)\)</p>

<p>Space Complexity: \(O(1)\)</p>

<p><strong>Key-point:</strong> Left -&gt; value -&gt; Right</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1"># Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
</span><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">inorderTraversal</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
        <span class="s">"""
        :type root: TreeNode
        :rtype: List[int]
        """</span>
        
        
        <span class="c1"># dfs
</span>        
        <span class="n">out</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">def</span> <span class="nf">DFS</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">out</span><span class="p">):</span>
            
            <span class="k">if</span> <span class="n">head</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">return</span>
            
            
            <span class="n">DFS</span><span class="p">(</span><span class="n">head</span><span class="p">.</span><span class="n">left</span><span class="p">,</span><span class="n">out</span><span class="p">)</span>
            <span class="n">out</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">head</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
            <span class="n">DFS</span><span class="p">(</span><span class="n">head</span><span class="p">.</span><span class="n">right</span><span class="p">,</span><span class="n">out</span><span class="p">)</span>
            
            <span class="k">return</span> 
        
        <span class="n">DFS</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">out</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">out</span>
</code></pre></div></div>

<h3 id="stack">Stack</h3>

<p>Time Complexity: \(O(N)\)</p>

<p>Space Complexity: \(O(1)\)</p>

<p><strong>Key-point:</strong> Stack</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1"># Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
</span>
    
<span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">inorderTraversal</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
        <span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">while</span> <span class="n">root</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">stack</span> <span class="o">!=</span> <span class="p">[]:</span>
            <span class="k">while</span> <span class="n">root</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
                <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="p">.</span><span class="n">left</span>
            <span class="n">root</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span> <span class="c1"># back to the last root before "None" or last root
</span>            <span class="n">res</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
            <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="p">.</span><span class="n">right</span>
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div></div>

<h2 id="95-unique-binary-search-trees-ii-starstar"><a href="https://leetcode.com/problems/unique-binary-search-trees-ii/">95. Unique Binary Search Trees II</a> :star::star:</h2>

<h3 id="dp-star-star-star">DP :star: :star: :star:</h3>

<p>Time Complexity: \(O()\)</p>

<p>Space Complexity: \(O()\)</p>

<p><strong>Key-point:</strong> 
F(a,b): return target nodes within given range <code class="language-html highlighter-rouge">a,b</code></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="syntax"><code>    F(i)
    /  \   F(1~i-1)  F(i+1~n)
</code></pre></div></div>

<ol>
  <li>Set Base Node value</li>
  <li>From base value, separate into two section.</li>
  <li>Find target nodes for left and right. (From given section)</li>
  <li>Connect to root and save into memo. (return the memo)</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1"># Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
</span><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">generateTrees</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="s">"""
        :type n: int
        :rtype: List[TreeNode]
        """</span>
        
        <span class="c1"># DP
</span>
        <span class="k">def</span> <span class="nf">DP</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
            
            
            
            <span class="k">if</span> <span class="n">start</span> <span class="o">&gt;</span> <span class="n">end</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span>
            
            <span class="n">memo</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="c1"># root node
</span>            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                
                <span class="c1"># find target nodes
</span>                <span class="n">leftList</span> <span class="o">=</span> <span class="n">DP</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
                <span class="n">rightList</span> <span class="o">=</span> <span class="n">DP</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
                
                <span class="c1"># generate tree with target nodes
</span>                <span class="k">for</span> <span class="n">leftNode</span> <span class="ow">in</span> <span class="n">leftList</span><span class="p">:</span>
                    <span class="k">for</span> <span class="n">rightNode</span> <span class="ow">in</span> <span class="n">rightList</span><span class="p">:</span>
                        <span class="n">root</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                        <span class="n">root</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">leftNode</span>
                        <span class="n">root</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">rightNode</span>
                        <span class="n">memo</span> <span class="o">+=</span> <span class="p">[</span><span class="n">root</span><span class="p">]</span>
                        
            <span class="k">return</span> <span class="n">memo</span>
        
        <span class="k">return</span> <span class="n">DP</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">)</span>
</code></pre></div></div>
:ET