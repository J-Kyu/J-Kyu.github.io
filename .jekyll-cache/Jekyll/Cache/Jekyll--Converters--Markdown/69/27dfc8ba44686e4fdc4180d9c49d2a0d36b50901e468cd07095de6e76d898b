I"$’<h1 id="leetcode-week-4">LeetCode: Week 4</h1>

<blockquote>
  <p>:star: : Hard Coding or Easy</p>

  <p>:star::star: : Basic Question</p>

  <p>:star::star::star: : Twisted but worthy</p>

  <p>:star::star::star::star:: Discerning</p>
</blockquote>

<h2 id="78-subsets-starstar"><a href="https://leetcode.com/problems/subsets/submissions/">78. Subsets</a> :star::star:</h2>

<h3 id="cascading">Cascading</h3>

<p>Time Complexity: \(O(N\times2^N)\)</p>

<p>Space Complexity: \(O(N\times2^N)\)</p>

<p><strong>Key-Point</strong>: Append on previous result one by one.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">subsets</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
        <span class="s">"""
        :type nums: List[int]
        :rtype: List[List[int]]
        """</span>
        
        <span class="n">out</span> <span class="o">=</span> <span class="p">[[]]</span>
        
        <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
            <span class="n">out</span> <span class="o">+=</span> <span class="p">[</span><span class="n">element</span> <span class="o">+</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">out</span><span class="p">]</span>
        
        <span class="k">return</span> <span class="n">out</span>
</code></pre></div></div>

<h3 id="bitmask">Bitmask</h3>

<p>Time Complexity: \(O(N\times2^N)\)</p>

<p>Space Complexity: \(O(N\times2^N)\)</p>

<p><strong>Key-Point</strong></p>

<ul>
  <li>When we convert Increasing int numbers in order into binary number, its gives none-duplicated bit sequence.  For instance, 8\(\to\) <code class="language-html highlighter-rouge">1000</code>, 9\(\to\) <code class="language-html highlighter-rouge">1001</code>, 10\(\to\) <code class="language-html highlighter-rouge">1010</code>.</li>
  <li>Without considering Zero padding in bit mask, we cannot make combination of bit numbers.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">subsets</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
        <span class="s">"""
        :type nums: List[int]
        :rtype: List[List[int]]
        """</span>
        
        <span class="c1"># bitmask 
</span>        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="n">out</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="n">nth_bit</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">n</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="n">n</span><span class="p">):</span>
            <span class="c1"># 2 things happens here
</span>            <span class="c1"># 1. convert int into binary number with keeping zero padding
</span>            <span class="c1"># 2. remove first 3 letters for unnecessary characters "0b1"
</span>            <span class="n">bitmask</span> <span class="o">=</span> <span class="nb">bin</span><span class="p">(</span> <span class="n">i</span> <span class="o">|</span> <span class="n">nth_bit</span> <span class="p">)[</span><span class="mi">3</span><span class="p">:]</span>
            
            <span class="c1"># according to bitmask, we create new subset
</span>            <span class="n">out</span><span class="p">.</span><span class="n">append</span><span class="p">([</span><span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">if</span> <span class="n">bitmask</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s">'1'</span><span class="p">])</span>
            
        
        
        <span class="k">return</span> <span class="n">out</span>
</code></pre></div></div>

<h2 id="79-word-search-starstar"><a href="https://leetcode.com/problems/word-search//">79. Word Search</a> :star::star:</h2>

<h3 id="counter-and-rotate">Counter and Rotate</h3>

<p>Time Complexity: \(O(N\times M)\), where \(N\) is column and \(M\) is row of board</p>

<p>Space Complexity: \(O(N\times M)\)</p>

<p><strong>Key-point:</strong> Before go deep down into calculation process, check whether or not given condition is valid. In this example, I used <code class="language-html highlighter-rouge">collections.Counter</code> to check if word is exist in board. Without this method, the algorithm will take more than 3000 ms. (with the function it will take approximately 20 ms)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">exist</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">board</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
        <span class="s">"""
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """</span>

        <span class="c1"># pre-check
</span>        <span class="k">if</span> <span class="n">Counter</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">-</span> <span class="n">Counter</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="n">board</span><span class="p">,[])):</span> 
            <span class="k">return</span> <span class="bp">False</span>
        
        
         
        <span class="n">m</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        
        
        <span class="k">def</span> <span class="nf">Check</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">index</span><span class="p">):</span>
            <span class="n">dir_y</span><span class="p">,</span><span class="n">dir_x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
            
            <span class="c1"># final condition
</span>            <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
                <span class="k">return</span> <span class="bp">True</span>
            
            <span class="c1"># false condition
</span>            <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="ow">and</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">)</span>  <span class="ow">or</span> <span class="n">board</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">!=</span> <span class="n">word</span><span class="p">[</span><span class="n">index</span><span class="p">]:</span>
                <span class="k">return</span> <span class="bp">False</span>
            
            <span class="c1"># prevent overlap
</span>            <span class="n">temp</span><span class="p">,</span> <span class="n">board</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span>  <span class="n">board</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">],</span> <span class="s">'-'</span>


            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">Check</span><span class="p">(</span><span class="n">y</span><span class="o">+</span><span class="n">dir_y</span><span class="p">,</span><span class="n">x</span><span class="o">+</span><span class="n">dir_x</span><span class="p">,</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                    <span class="k">return</span> <span class="bp">True</span>
                <span class="n">dir_y</span><span class="p">,</span><span class="n">dir_x</span> <span class="o">=</span> <span class="n">dir_x</span><span class="p">,</span> <span class="o">-</span><span class="n">dir_y</span>
                
            <span class="c1"># put back not used value    
</span>            <span class="n">board</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span>
        
        
        <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">Check</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="mi">0</span><span class="p">):</span>
                    <span class="k">return</span> <span class="bp">True</span>
        <span class="k">return</span> <span class="bp">False</span>
</code></pre></div></div>

<h2 id="81-search-in-rotated-sorted-array-ii-starstarstar-constantly-wrong"><a href="https://leetcode.com/problems/search-in-rotated-sorted-array-ii/">81. Search in Rotated Sorted Array II</a> :star::star::star: (â€‹Constantly Wrong)</h2>

<h3 id="binary-search">Binary Search</h3>

<p>Time Complexity: Worst \(O(N)\), Best \(O(\log{N})\)</p>

<p>Space Complexity: \(O(1)\)</p>

<p><strong>Key-Point:</strong> There are 2 main key points</p>

<ol>
  <li>This algorithm uses binary search. However, since there is duplicated values in list, comparing values which value of <code class="language-html highlighter-rouge">midIndex</code>, <code class="language-html highlighter-rouge">startIndex</code>, <code class="language-html highlighter-rouge">endIndex</code> could be same. In this case we cannot judge which part to shift. Thus we need to prevent comparing duplicated values.</li>
  <li>This algorithm only judges when selected section is in order. Which means it first see if given section ([start,mid) or (mid,end]) is in order. After verifying given selection is order, see if target is located at the section. If not it shift to the next section and split into half.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
        <span class="s">"""
        :type nums: List[int]
        :type target: int
        :rtype: bool
        """</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="n">startIndex</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">endIndex</span> <span class="o">=</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span>
        
        <span class="k">while</span> <span class="n">startIndex</span> <span class="o">&lt;=</span> <span class="n">endIndex</span><span class="p">:</span>
            <span class="n">midIndex</span> <span class="o">=</span> <span class="p">(</span> <span class="n">endIndex</span> <span class="o">+</span> <span class="n">startIndex</span> <span class="p">)</span><span class="o">/</span><span class="mi">2</span> 

            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">midIndex</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">True</span>
            

            <span class="c1">#prevent duplicated one
</span>            <span class="k">while</span> <span class="n">startIndex</span> <span class="o">&lt;</span> <span class="n">midIndex</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">startIndex</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">midIndex</span><span class="p">]:</span>
                <span class="n">startIndex</span> <span class="o">+=</span> <span class="mi">1</span>


            <span class="c1"># check if first half is in order
</span>            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">startIndex</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="p">[</span><span class="n">midIndex</span><span class="p">]:</span>
                <span class="c1"># check if target is in between startIndex and midIndex
</span>                <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">startIndex</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">target</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">midIndex</span><span class="p">]:</span>
                    <span class="n">endIndex</span> <span class="o">=</span> <span class="n">midIndex</span> <span class="o">-</span> <span class="mi">1</span>
                <span class="c1"># eventhough, first half is in order, but target is beyond midIndex
</span>                <span class="k">else</span><span class="p">:</span>
                    <span class="n">startIndex</span> <span class="o">=</span> <span class="n">midIndex</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="c1"># since first half is not in order, we can assume that second half is in order         
</span>            <span class="k">else</span><span class="p">:</span>
                <span class="c1"># check if target is in the second half which is in order
</span>                <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">midIndex</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">target</span> <span class="o">&lt;=</span>  <span class="n">nums</span><span class="p">[</span><span class="n">endIndex</span><span class="p">]:</span>
                    <span class="n">startIndex</span> <span class="o">=</span> <span class="n">midIndex</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="c1"># now we can assume that target is located at unorder fired half
</span>                <span class="k">else</span><span class="p">:</span>
                    <span class="n">endIndex</span> <span class="o">=</span> <span class="n">midIndex</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="bp">False</span>
</code></pre></div></div>

<h2 id="82-remove-duplicates-from-sorted-list-ii"><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/submissions/">82. Remove Duplicates from Sorted List II</a></h2>

<h3 id="find-delete-and-connectstar">Find delete and connect:star:</h3>

<p>Time Complexity: Worst \(O(N)\)</p>

<p>Space Complexity: \(O(1)\)</p>

<p><strong>Key-Point:</strong> Find Delete and connect.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1"># Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
</span><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">deleteDuplicates</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">):</span>
        <span class="s">"""
        :type head: ListNode
        :rtype: ListNode
        """</span>
        
        
        <span class="n">newHead</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">head</span><span class="p">)</span>
        <span class="n">curNode</span>  <span class="o">=</span>  <span class="n">newHead</span>
        
        
        
        <span class="k">while</span> <span class="n">curNode</span><span class="p">.</span><span class="nb">next</span> <span class="ow">and</span> <span class="n">curNode</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span><span class="p">:</span>
            
            <span class="k">if</span> <span class="n">curNode</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span> <span class="o">==</span> <span class="n">curNode</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">:</span>
                <span class="n">tempNode</span> <span class="o">=</span> <span class="n">curNode</span><span class="p">.</span><span class="nb">next</span>
                
                <span class="k">while</span> <span class="n">tempNode</span><span class="p">:</span>
                    
                    <span class="k">if</span> <span class="n">tempNode</span><span class="p">.</span><span class="nb">next</span> <span class="ow">and</span> <span class="n">tempNode</span><span class="p">.</span><span class="n">val</span> <span class="o">!=</span> <span class="n">tempNode</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">:</span>
                        <span class="n">tempNode</span> <span class="o">=</span> <span class="n">tempNode</span><span class="p">.</span><span class="nb">next</span>
                        <span class="k">break</span>
                        
                    <span class="n">tempNode</span> <span class="o">=</span> <span class="n">tempNode</span><span class="p">.</span><span class="nb">next</span>
                    
                <span class="n">curNode</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">tempNode</span>
                <span class="k">continue</span>
                
                
            <span class="n">curNode</span> <span class="o">=</span> <span class="n">curNode</span><span class="p">.</span><span class="nb">next</span>
           
        <span class="k">return</span> <span class="n">newHead</span><span class="p">.</span><span class="nb">next</span>
                    
</code></pre></div></div>

<h3 id="comparing-with-prev-star-star">Comparing with Prev :star: :star:</h3>

<p>Time Complexity: Worst \(O(N)\)</p>

<p>Space Complexity: \(O(1)\)</p>

<p><strong>Key-Point:</strong> Find, shrink and compare with prev  and connect</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1"># Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
</span><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">deleteDuplicates</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">):</span>
        <span class="s">"""
        :type head: ListNode
        :rtype: ListNode
        """</span>
        <span class="c1"># compare with prev node
</span>
        <span class="n">curNode</span>  <span class="o">=</span> <span class="n">head</span>
        <span class="n">newHead</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">head</span><span class="p">)</span>
        <span class="n">prev</span> <span class="o">=</span> <span class="n">newHead</span>
        
        
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            
            <span class="c1">#check duplicated one
</span>            <span class="k">while</span> <span class="n">curNode</span> <span class="ow">and</span> <span class="n">curNode</span><span class="p">.</span><span class="nb">next</span> <span class="ow">and</span> <span class="n">curNode</span><span class="p">.</span><span class="n">val</span> <span class="o">==</span> <span class="n">curNode</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">:</span>
                <span class="n">curNode</span> <span class="o">=</span> <span class="n">curNode</span><span class="p">.</span><span class="nb">next</span>
                
                
            <span class="c1"># update prev if following curNodes are been shrunk
</span>            <span class="k">if</span> <span class="n">prev</span><span class="p">.</span><span class="nb">next</span> <span class="o">!=</span> <span class="n">curNode</span><span class="p">:</span>
                <span class="n">prev</span><span class="p">.</span><span class="nb">next</span>  <span class="o">=</span> <span class="n">curNode</span><span class="p">.</span><span class="nb">next</span>
            <span class="c1"># nodes been shrunk
</span>            <span class="k">else</span><span class="p">:</span>
                <span class="n">prev</span> <span class="o">=</span> <span class="n">curNode</span>
            
            <span class="k">if</span> <span class="n">curNode</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">newHead</span><span class="p">.</span><span class="nb">next</span>
            
            <span class="n">curNode</span> <span class="o">=</span> <span class="n">curNode</span><span class="p">.</span><span class="nb">next</span>
</code></pre></div></div>

<h2 id="86-partition-list"><a href="https://leetcode.com/problems/partition-list/">86. Partition List</a></h2>

<h3 id="using-list-star">Using List :star:</h3>

<p>Time Complexity: Worst \(O(N)\)</p>

<p>Space Complexity: \(O(1)\)</p>

<p><strong>Key-Point:</strong> Create new node at list if it is greater than <code class="language-html highlighter-rouge">x</code>. At the end, append nodes in list to original node.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1"># Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
</span><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">partition</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="s">"""
        :type head: ListNode
        :type x: int
        :rtype: ListNode
        """</span>
        
        <span class="c1"># using list
</span>        <span class="n">newHead</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">head</span><span class="p">)</span>
        <span class="n">curNode</span> <span class="o">=</span> <span class="n">newHead</span>
        <span class="n">temp</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">while</span> <span class="n">curNode</span><span class="p">.</span><span class="nb">next</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">curNode</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span> <span class="o">&gt;=</span> <span class="n">x</span><span class="p">:</span>
                <span class="n">temp</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">ListNode</span><span class="p">(</span><span class="n">curNode</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">))</span>
                <span class="n">curNode</span><span class="p">.</span><span class="nb">next</span><span class="o">=</span> <span class="n">curNode</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span>
                <span class="k">continue</span>
                
            <span class="n">curNode</span> <span class="o">=</span> <span class="n">curNode</span><span class="p">.</span><span class="nb">next</span>
            
        <span class="k">for</span> <span class="n">nd</span> <span class="ow">in</span> <span class="n">temp</span><span class="p">:</span>    
            <span class="n">curNode</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">nd</span>
            <span class="n">curNode</span> <span class="o">=</span> <span class="n">curNode</span><span class="p">.</span><span class="nb">next</span>
        
        <span class="k">return</span> <span class="n">newHead</span><span class="p">.</span><span class="nb">next</span>
</code></pre></div></div>

<h3 id="save-on-small-and-big-node-star">Save on Small and Big node :star:</h3>

<p>Time Complexity: Worst \(O(N)\)</p>

<p>Space Complexity: \(O(1)\)</p>

<p><strong>Key-Point:</strong> Save node at <code class="language-html highlighter-rouge">headSmallNode</code> if nodeâ€™s value is smaller than <code class="language-html highlighter-rouge">x</code>. Save node at <code class="language-html highlighter-rouge">headBigNode</code> if nodeâ€™s value is bigger or equal to <code class="language-html highlighter-rouge">x</code>. Connect two node list at the end.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1"># Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
</span><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">partition</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="s">"""
        :type head: ListNode
        :type x: int
        :rtype: ListNode
        """</span>
        <span class="n">headSmallNode</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">()</span>
        <span class="n">curSmallNode</span> <span class="o">=</span> <span class="n">headSmallNode</span>
        
        <span class="n">headBigNode</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">()</span>
        <span class="n">curBigNode</span> <span class="o">=</span> <span class="n">headBigNode</span>
        
        <span class="k">while</span> <span class="n">head</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
            
            <span class="k">if</span> <span class="n">head</span><span class="p">.</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">:</span>
                <span class="n">curSmallNode</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="n">head</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
                <span class="n">curSmallNode</span> <span class="o">=</span> <span class="n">curSmallNode</span><span class="p">.</span><span class="nb">next</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">curBigNode</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="n">head</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
                <span class="n">curBigNode</span> <span class="o">=</span> <span class="n">curBigNode</span><span class="p">.</span><span class="nb">next</span>
            
            <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="p">.</span><span class="nb">next</span>
            
        <span class="n">curSmallNode</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">headBigNode</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">return</span> <span class="n">headSmallNode</span><span class="p">.</span><span class="nb">next</span>
</code></pre></div></div>

<h2 id="90-subsets-ii"><a href="https://leetcode.com/problems/subsets-ii/">90. Subsets II</a></h2>

<h3 id="using--loop">Using  Loop</h3>

<p>Time Complexity: Worst \(O(N^2)\)</p>

<p>Space Complexity: \(O()\)</p>

<p><strong>Key-Point:</strong>  Create subsets from <code class="language-html highlighter-rouge">out</code> but check before append to out.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">subsetsWithDup</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
        <span class="s">"""
        :type nums: List[int]
        :rtype: List[List[int]]
        """</span>
        
        <span class="c1"># sort and top to bottom
</span>        <span class="n">out</span> <span class="o">=</span> <span class="p">[[]]</span>
        <span class="n">nums</span><span class="p">.</span><span class="n">sort</span><span class="p">()</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
            <span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">out</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">j</span><span class="o">+</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">out</span><span class="p">:</span>
                    <span class="n">tmp</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">j</span><span class="o">+</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="n">out</span> <span class="o">+=</span> <span class="n">tmp</span>
            
        <span class="k">return</span> <span class="n">out</span>
</code></pre></div></div>

<h3 id="recursive-star-star">Recursive :star: :star:</h3>

<h3 id="using--loop-1">Using  Loop</h3>

<p>Time Complexity: Worst \(O()\)</p>

<p>Space Complexity: \(O()\)</p>

<p><strong>Key-Point:</strong>  First sort <code class="language-html highlighter-rouge">nums</code> to prevent duplicated order. Then we go through each of value in order recursively.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">subsetsWithDup</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
        <span class="s">"""
        :type nums: List[int]
        :rtype: List[List[int]]
        """</span>
        
        <span class="k">def</span> <span class="nf">Recursive</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">index</span><span class="p">,</span> <span class="n">tmp</span><span class="p">,</span> <span class="n">out</span><span class="p">):</span>
            <span class="n">out</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
            
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
                <span class="c1"># duplicated one
</span>                <span class="k">if</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">index</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                    <span class="k">continue</span>
                    
                <span class="n">Recursive</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">tmp</span><span class="o">+</span><span class="p">[</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]],</span><span class="n">out</span><span class="p">)</span>
            
        
        <span class="n">nums</span><span class="p">.</span><span class="n">sort</span><span class="p">()</span>
        <span class="n">out</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">Recursive</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="mi">0</span> <span class="p">,</span> <span class="p">[],</span> <span class="n">out</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">out</span>
</code></pre></div></div>
:ET